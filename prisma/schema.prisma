datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  passwordHash  String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Address {
  id         String  @id @default(cuid())
  buildingId String  @unique
  street1    String
  street2    String?
  city       String?
  state      String
  zip        String

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
}

model Building {
  id        String  @id @default(cuid())
  name      String?
  numFloors Int     @default(1)

  address Address?
  floors  Floor[]
  rooms   Room[]
}

model Floor {
  id         String @id @default(cuid())
  buildingId String
  code       String
  index      Int

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  rooms    Room[]
}

model Room {
  id         String @id @default(cuid())
  buildingId String
  floorId    String
  code       String

  building Building @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  floor    Floor    @relation(fields: [floorId], references: [id], onDelete: Cascade)
}

model Student {
  id          String  @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phoneNumber String?
}
